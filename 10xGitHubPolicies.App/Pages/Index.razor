@page "/"
@using _10xGitHubPolicies.App.Services.Dashboard
@using _10xGitHubPolicies.App.Services.Scanning
@using _10xGitHubPolicies.App.ViewModels
@using Hangfire
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons
@using System.Linq
@inject IDashboardService DashboardService
@inject IScanningService ScanningService
@inject IBackgroundJobClient BackgroundJobClient

<PageTitle>Compliance Dashboard</PageTitle>

@if (_viewModel == null)
{
    <FluentProgress Ring="true" />
}
else
{
    <div class="kpi-grid">
        <FluentCard class="kpi-card">
            <div class="kpi-title">
                <FluentIcon Icon="@(Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ChartMultiple)" />
                <span>Overall Compliance</span>
            </div>
            <div class="kpi-value">@($"{_viewModel.CompliancePercentage:F2}%")</div>
        </FluentCard>

        <FluentCard class="kpi-card">
            <div class="kpi-title">
                <FluentIcon Icon="@(Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Apps)" />
                <span>Total Repositories</span>
            </div>
            <div class="kpi-value">@_viewModel.TotalRepositories</div>
        </FluentCard>

        <FluentCard class="kpi-card compliant">
            <div class="kpi-title">
                <FluentIcon Icon="@(Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ShieldCheckmark)" />
                <span>Compliant</span>
            </div>
            <div class="kpi-value">@_viewModel.CompliantRepositories</div>
        </FluentCard>

        <FluentCard class="kpi-card non-compliant">
            <div class="kpi-title">
                <FluentIcon Icon="@(Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ShieldError)" />
                <span>Non-Compliant</span>
            </div>
            <div class="kpi-value">@_viewModel.NonCompliantRepositoriesCount</div>
        </FluentCard>
    </div>

    <FluentCard Class="mt-4" Style="padding: 16px; margin-top: 2rem;">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" Style="width: 100%;">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                <FluentIcon Icon="@(Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ShieldError)" />
                <h3 style="margin-left: 8px; margin-bottom: 0;">Non-Compliant Repositories</h3>
            </FluentStack>

            <FluentSpacer />
            
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                <FluentTextField @bind-Value="_repositoryFilter" Placeholder="Filter by name..." Immediate="true" Style="width: 250px;"/>
                <FluentButton Id="scan-button" Appearance="Appearance.Accent" OnClick="StartScan" Disabled="@_isScanning" Style="margin-left: 16px;">
                    @if (_isScanning)
                    {
                        <FluentProgress Ring="true" />
                        <span>Scanning...</span>
                    }
                    else
                    {
                        <span>Scan Now</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>

        @if (GetFilteredRepositories().Any())
        {
            <FluentDataGrid Items="@GetFilteredRepositories().AsQueryable()" TGridItem="NonCompliantRepositoryViewModel" Striped="true" Style="margin-top: 16px;">
                <TemplateColumn Title="Repository">
                    <FluentAnchor Href="@context.Url" Target="_blank" Appearance="Appearance.Hypertext">@context.Name</FluentAnchor>
                </TemplateColumn>
                <TemplateColumn Title="Violations">
                    <FluentStack Wrap="true">
                        @foreach (var policy in context.ViolatedPolicies)
                        {
                            <FluentBadge Appearance="Appearance.Accent" Style="margin: 2px;">@policy</FluentBadge>
                        }
                    </FluentStack>
                </TemplateColumn>
            </FluentDataGrid>
        }
        else
        {
            <div style="padding: 24px; text-align: center;">
                <p>All repositories are compliant or match the current filter.</p>
            </div>
        }
    </FluentCard>
}

<style>
    .kpi-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .kpi-card {
        padding: 16px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .kpi-title {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 1rem;
        color: var(--neutral-foreground-rest);
    }
    
    .kpi-value {
        font-size: 2.5rem;
        font-weight: 600;
        margin-top: 16px;
        text-align: right;
    }
    
    .compliant {
        border-left: 4px solid var(--success-fill-rest);
    }
    
    .non-compliant {
        border-left: 4px solid var(--error-fill-rest);
    }
</style>

@code {
    private DashboardViewModel? _viewModel;
    private bool _isScanning = false;
    private string _repositoryFilter = string.Empty;

    private IEnumerable<NonCompliantRepositoryViewModel> GetFilteredRepositories()
    {
        if (_viewModel?.NonCompliantRepositories == null)
        {
            return Enumerable.Empty<NonCompliantRepositoryViewModel>();
        }

        return _viewModel.NonCompliantRepositories
            .Where(r => string.IsNullOrWhiteSpace(_repositoryFilter) || r.Name.Contains(_repositoryFilter, StringComparison.OrdinalIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        _viewModel = await DashboardService.GetDashboardViewModelAsync(string.Empty);
    }

    private async Task StartScan()
    {
        _isScanning = true;
        StateHasChanged();

        BackgroundJobClient.Enqueue<IScanningService>(s => s.PerformScanAsync());
        
        // A simple delay to allow the background job to start and finish.
        // In a real-world scenario, you'd use SignalR or a polling mechanism to get completion status.
        await Task.Delay(5000); 

        await LoadDashboardData();
        _isScanning = false;
        StateHasChanged();
    }
}