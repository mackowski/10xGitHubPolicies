---
alwaysApply: false
---

# E2E Testing Guidelines - Playwright

## Overview
End-to-end tests verify complete user workflows from browser to database. This rule applies when writing Playwright tests for critical user journeys. Use E2E tests sparinglyâ€”they're slow and expensive compared to unit/integration tests.

## Technology Stack
- **E2E Framework**: Playwright (.NET)
- **Test Runner**: xUnit with Playwright.NET integration
- **Language**: C# (.NET 8)
- **Browsers**: Chromium
- **Architecture**: Dual-host (test host + manually running web application)

## Architecture

### Dual-Host Pattern
- **Test Host**: Minimal .NET host providing GitHub API services and database access
- **Web Application**: Manually running application at `https://localhost:7040/` for UI testing
- **Separation**: Test data creation separate from UI testing for better debugging

### Test Mode Requirement
E2E tests require Test Mode to be enabled in the web application:
```json
{
  "TestMode": {
    "Enabled": true
  }
}
```

Test Mode provides:
- Authentication bypass (automatic login as `mackowski` user)
- Authorization bypass (always returns `true` for team membership)
- Full GitHub App functionality preserved

## Rules

### Test Structure
- Inherit from `E2ETestBase` for common setup and browser management
- Use Page Object Model (`DashboardPage`) for UI interactions
- Follow Arrange-Act-Assert pattern
- Always clean up test data in `finally` blocks

### Page Object Model
- Encapsulate UI interactions in page classes
- Use Playwright locators for element selection
- Provide clear, descriptive method names
- Handle async operations with proper awaits

### Test Data Management
- Use `RepositoryHelper` for repository creation/cleanup
- Use `DatabaseHelper` for database verification
- Generate unique test data names (GUIDs) to avoid conflicts
- Handle cleanup failures gracefully

### Screenshot Capture
- Capture screenshots at key test points
- Use `ScreenshotHelper` for consistent screenshot naming
- Screenshots saved to `test-results/screenshots/` for debugging

### Prerequisites
- Web application must be running manually before tests
- Database must be available (Docker Compose)
- Test Mode must be enabled in `appsettings.Development.json`
- Playwright browsers must be installed

### Best Practices
- Initialize configuration only with Chromium/Desktop Chrome browser
- Use browser contexts for isolating test environments
- Implement the Page Object Model for maintainable tests
- Use locators for resilient element selection
- Leverage API testing for backend validation
- Implement test hooks for setup and teardown
- Use expect assertions with specific matchers
- Always verify web application connectivity before tests
- Never enable Test Mode in production environments

### Example
```csharp
[Fact]
[Trait("Category", "E2E-Workflow")]
public async Task CompletePolicyEnforcementWorkflow_ShouldWorkEndToEnd()
{
    // Arrange
    var repositoryName = $"e2e-test-{Guid.NewGuid():N}";
    var repository = await RepositoryHelper.CreateTestRepositoryAsync(repositoryName);
    
    try
    {
        // Act
        var page = await Browser.NewPageAsync();
        var dashboardPage = new DashboardPage(page);
        
        await dashboardPage.GotoAsync();
        await dashboardPage.TriggerScanAsync();
        await dashboardPage.WaitForScanCompletionAsync();
        
        // Assert
        var violations = await DatabaseHelper.GetPolicyViolationsAsync(repository.Id);
        violations.Should().NotBeEmpty();
    }
    finally
    {
        // Cleanup
        await RepositoryHelper.DeleteTestRepositoryAsync(repositoryName);
    }
}
```

## Documentation
- See `docs/testing-e2e-tests.md` for comprehensive E2E testing guide
- See `docs/testing-strategy.md` for testing strategy overview
- See `10xGitHubPolicies.Tests.E2E/README.md` for project-specific setup
