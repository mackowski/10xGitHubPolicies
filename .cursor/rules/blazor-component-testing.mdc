---
alwaysApply: false
---

# Blazor Component Testing Guidelines - bUnit

## Overview
Blazor component tests verify UI component rendering, interactivity, and state management. This rule applies when testing Razor components using bUnit.

## Technology Stack
- **Test Framework**: xUnit 2.6+
- **Blazor Testing**: bUnit 1.28+
- **Mocking**: NSubstitute 5.1+ (for injected services)
- **Assertions**: FluentAssertions 6.12+ + bUnit assertions
- **Test Data**: Bogus 35.4+

## File Naming Conventions
```
Pattern: {ComponentName}Tests.cs
Location: Tests.Components/

Examples:
- IndexTests.cs (for Pages/Index.razor)
- MainLayoutTests.cs (for Shared/MainLayout.razor)
- OnboardingTests.cs (for Pages/Onboarding.razor)
```

## Test Class Structure

```csharp
using Bunit;
using FluentAssertions;
using NSubstitute;
using Xunit;

namespace _10xGitHubPolicies.Tests.Components;

public class IndexTests : TestContext
{
    private readonly IDashboardService _dashboardService;
    private readonly IScanningService _scanningService;
    private readonly IAuthorizationService _authorizationService;
    
    public IndexTests()
    {
        // Create mocks
        _dashboardService = Substitute.For<IDashboardService>();
        _scanningService = Substitute.For<IScanningService>();
        _authorizationService = Substitute.For<IAuthorizationService>();
        
        // Register mocks with TestContext
        Services.AddSingleton(_dashboardService);
        Services.AddSingleton(_scanningService);
        Services.AddSingleton(_authorizationService);
        
        // Add Fluent UI services (if component uses them)
        Services.AddFluentUIComponents();
    }
    
    [Fact]
    public void Component_OnInitialized_LoadsDashboardData()
    {
        // Arrange
        var viewModel = new DashboardViewModel
        {
            NonCompliantRepositories = new List<Repository>(),
            CompliancePercentage = 95.5m
        };
        
        _dashboardService.GetDashboardDataAsync()
            .Returns(Task.FromResult(viewModel));
        
        // Act
        var cut = RenderComponent<Index>();  // Component Under Test
        
        // Assert
        cut.Find("h1").TextContent.Should().Contain("Compliance Dashboard");
        cut.Find(".compliance-percentage").TextContent.Should().Contain("95.5%");
    }
}
```

## Rendering Components

### Basic Rendering
```csharp
[Fact]
public void Dashboard_RendersSuccessfully()
{
    // Arrange - Setup mock data
    _dashboardService.GetDashboardDataAsync()
        .Returns(GetTestDashboardData());
    
    // Act - Render component
    var cut = RenderComponent<Index>();
    
    // Assert - Verify rendering
    cut.Find("h1").Should().NotBeNull();
    cut.Markup.Should().Contain("Compliance Dashboard");
}
```

### Rendering with Parameters
```csharp
[Fact]
public void RepositoryCard_DisplaysRepositoryName()
{
    // Act - Pass parameters to component
    var cut = RenderComponent<RepositoryCard>(parameters => parameters
        .Add(p => p.Repository, new Repository 
        { 
            Name = "test-repo",
            Owner = "test-owner" 
        })
    );
    
    // Assert
    cut.Find(".repository-name").TextContent.Should().Be("test-repo");
}
```

### Rendering with Cascading Parameters
```csharp
[Fact]
public void Component_ReceivesCascadingValue()
{
    // Arrange
    var authState = new AuthenticationState(
        new ClaimsPrincipal(new ClaimsIdentity())
    );
    
    // Act - Provide cascading parameter
    var cut = RenderComponent<Index>(parameters => parameters
        .AddCascadingValue("AuthenticationState", authState)
    );
    
    // Assert
    cut.Instance.AuthState.Should().Be(authState);
}
```

### Rendering with Child Content
```csharp
[Fact]
public void Layout_RendersChildContent()
{
    // Act
    var cut = RenderComponent<MainLayout>(parameters => parameters
        .AddChildContent("<h1>Test Content</h1>")
    );
    
    // Assert
    cut.Find("h1").TextContent.Should().Be("Test Content");
}
```

## Testing User Interactions

### Button Clicks
```csharp
[Fact]
public async Task ScanButton_WhenClicked_TriggersS

can()
{
    // Arrange
    var cut = RenderComponent<Index>();
    var button = cut.Find("#scan-button");
    
    // Act
    await button.ClickAsync(new MouseEventArgs());
    
    // Assert
    await _scanningService.Received(1).PerformScanAsync();
    cut.Find("#scanning-indicator").Should().NotBeNull();
}
```

### Input Changes
```csharp
[Fact]
public void FilterInput_WhenChanged_FiltersRepositories()
{
    // Arrange
    var cut = RenderComponent<Index>();
    var input = cut.Find("#filter-input");
    
    // Act
    input.Change("test-repo");
    
    // Assert
    var visibleRepos = cut.FindAll(".repository-item");
    visibleRepos.Should().HaveCount(1);
    visibleRepos.First().TextContent.Should().Contain("test-repo");
}
```

### Form Submission
```csharp
[Fact]
public async Task ConfigForm_OnSubmit_SavesConfiguration()
{
    // Arrange
    var cut = RenderComponent<OnboardingForm>();
    
    cut.Find("#team-input").Change("my-org/security-team");
    var form = cut.Find("form");
    
    // Act
    await form.SubmitAsync();
    
    // Assert
    await _configService.Received(1).SaveConfigAsync(
        Arg.Is<string>(s => s.Contains("my-org/security-team"))
    );
}
```

### Checkbox and Radio Buttons
```csharp
[Fact]
public void PolicySelector_WhenChanged_UpdatesSelection()
{
    // Arrange
    var cut = RenderComponent<PolicySelector>();
    var checkbox = cut.Find("#policy-agents-md");
    
    // Act
    checkbox.Change(true);
    
    // Assert
    cut.Instance.SelectedPolicies.Should().Contain("has_agents_md");
}
```

## Testing Component State

### Testing Component Lifecycle
```csharp
[Fact]
public async Task Component_OnInitialized_LoadsData()
{
    // Arrange
    var loadedData = new DashboardViewModel();
    _dashboardService.GetDashboardDataAsync().Returns(loadedData);
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Wait for OnInitializedAsync to complete
    await cut.Instance.InitializedTask;
    
    // Assert
    cut.Instance.ViewModel.Should().Be(loadedData);
}
```

### Testing Component Properties
```csharp
[Fact]
public void Component_HasCorrectDefaultState()
{
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    cut.Instance.IsScanning.Should().BeFalse();
    cut.Instance.FilterText.Should().BeEmpty();
}
```

### Testing State Changes
```csharp
[Fact]
public async Task StartScan_UpdatesIsScanning()
{
    // Arrange
    var cut = RenderComponent<Index>();
    
    // Act
    await cut.Instance.StartScan();
    
    // Assert
    cut.Instance.IsScanning.Should().BeTrue();
    cut.Find("#scanning-indicator").Should().NotBeNull();
}
```

## Testing Conditional Rendering

### Show/Hide Elements
```csharp
[Fact]
public void Dashboard_WhenScanning_ShowsLoadingIndicator()
{
    // Arrange
    var cut = RenderComponent<Index>();
    
    // Initially not scanning
    cut.FindAll("#scanning-indicator").Should().BeEmpty();
    
    // Act - Start scan
    cut.Instance.IsScanning = true;
    cut.Render();  // Trigger re-render
    
    // Assert
    cut.Find("#scanning-indicator").Should().NotBeNull();
}
```

### Conditional Content
```csharp
[Fact]
public void Dashboard_WithNoViolations_ShowsSuccessMessage()
{
    // Arrange
    var viewModel = new DashboardViewModel
    {
        NonCompliantRepositories = new List<Repository>(),
        CompliancePercentage = 100m
    };
    
    _dashboardService.GetDashboardDataAsync().Returns(viewModel);
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    cut.Find(".success-message").TextContent
        .Should().Contain("All repositories are compliant");
    cut.FindAll(".repository-item").Should().BeEmpty();
}
```

### Error States
```csharp
[Fact]
public void Component_OnError_DisplaysErrorMessage()
{
    // Arrange
    _dashboardService.GetDashboardDataAsync()
        .Returns(Task.FromException<DashboardViewModel>(
            new Exception("Failed to load data")
        ));
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    cut.Find(".error-message").TextContent
        .Should().Contain("Failed to load data");
}
```

## Testing Fluent UI Components

### FluentButton
```csharp
[Fact]
public async Task FluentButton_WhenClicked_InvokesHandler()
{
    // Arrange
    var clicked = false;
    var cut = RenderComponent<FluentButton>(parameters => parameters
        .Add(p => p.OnClick, EventCallback.Factory.Create(this, () => clicked = true))
        .AddChildContent("Click Me")
    );
    
    // Act
    await cut.Find("button").ClickAsync(new MouseEventArgs());
    
    // Assert
    clicked.Should().BeTrue();
}
```

### FluentTextField
```csharp
[Fact]
public void FluentTextField_ValueBinding_Works()
{
    // Arrange
    var value = "initial";
    var cut = RenderComponent<FluentTextField<string>>(parameters => parameters
        .Add(p => p.Value, value)
        .Add(p => p.ValueChanged, EventCallback.Factory.Create<string>(
            this, newValue => value = newValue
        ))
    );
    
    // Act
    cut.Find("input").Change("updated");
    
    // Assert
    value.Should().Be("updated");
}
```

### FluentDataGrid
```csharp
[Fact]
public void FluentDataGrid_DisplaysRepositories()
{
    // Arrange
    var repos = new List<Repository>
    {
        new() { Name = "repo1", Owner = "owner1" },
        new() { Name = "repo2", Owner = "owner2" }
    };
    
    var cut = RenderComponent<RepositoryGrid>(parameters => parameters
        .Add(p => p.Repositories, repos)
    );
    
    // Assert
    var rows = cut.FindAll("tbody tr");
    rows.Should().HaveCount(2);
    rows[0].TextContent.Should().Contain("repo1");
    rows[1].TextContent.Should().Contain("repo2");
}
```

## Testing Navigation

### NavigationManager
```csharp
[Fact]
public void LoginButton_Redirects_ToGitHub()
{
    // Arrange
    var navManager = Services.GetRequiredService<NavigationManager>();
    var cut = RenderComponent<Login>();
    
    // Act
    cut.Find("#login-button").Click();
    
    // Assert
    navManager.Uri.Should().Contain("/challenge");
}
```

### Redirect After Authentication
```csharp
[Fact]
public void Index_WhenUnauthorized_RedirectsToLogin()
{
    // Arrange
    _authorizationService.IsUserAuthorizedAsync(Arg.Any<ClaimsPrincipal>())
        .Returns(false);
    
    var navManager = Services.GetRequiredService<NavigationManager>();
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    navManager.Uri.Should().Contain("/login");
}
```

## Testing JSInterop

### Mock IJSRuntime
```csharp
[Fact]
public async Task Component_CallsJavaScript()
{
    // Arrange
    var jsRuntime = Substitute.For<IJSRuntime>();
    Services.AddSingleton(jsRuntime);
    
    var cut = RenderComponent<Index>();
    
    // Act
    await cut.Instance.ShowAlert();
    
    // Assert
    await jsRuntime.Received(1).InvokeVoidAsync(
        "alert",
        Arg.Is<object[]>(args => args[0].ToString() == "Scan started")
    );
}
```

### Verify JS Invocations
```csharp
[Fact]
public void Component_OnRender_InitializesJavaScript()
{
    // Arrange
    var jsRuntime = Substitute.For<IJSRuntime>();
    Services.AddSingleton(jsRuntime);
    
    // Act
    var cut = RenderComponent<Dashboard>();
    
    // Assert - Verify JS initialization was called
    jsRuntime.Received().InvokeAsync<object>(
        "initializeDashboard",
        Arg.Any<object[]>()
    );
}
```

## Testing Authorization

### Authorized View
```csharp
[Fact]
public void Index_WhenAuthorized_DisplaysContent()
{
    // Arrange
    var authContext = this.AddTestAuthorization();
    authContext.SetAuthorized("test-user");
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    cut.Find(".dashboard-content").Should().NotBeNull();
    cut.FindAll(".unauthorized-message").Should().BeEmpty();
}
```

### Unauthorized View
```csharp
[Fact]
public void Index_WhenUnauthorized_ShowsAccessDenied()
{
    // Arrange
    var authContext = this.AddTestAuthorization();
    authContext.SetNotAuthorized();
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    cut.FindComponent<RedirectToLogin>().Should().NotBeNull();
}
```

## Waiting for Async Operations

### WaitForState
```csharp
[Fact]
public async Task Dashboard_LoadsDataAsynchronously()
{
    // Arrange
    var tcs = new TaskCompletionSource<DashboardViewModel>();
    _dashboardService.GetDashboardDataAsync().Returns(tcs.Task);
    
    var cut = RenderComponent<Index>();
    
    // Initially loading
    cut.Find(".loading-indicator").Should().NotBeNull();
    
    // Act - Complete async operation
    tcs.SetResult(new DashboardViewModel());
    
    // Wait for component to update
    cut.WaitForState(() => cut.FindAll(".loading-indicator").Count == 0);
    
    // Assert
    cut.Find(".dashboard-content").Should().NotBeNull();
}
```

### WaitForAssertion
```csharp
[Fact]
public void Filter_UpdatesResultsAfterDebounce()
{
    // Arrange
    var cut = RenderComponent<Index>();
    
    // Act
    cut.Find("#filter-input").Change("test");
    
    // Wait for debounced update (with timeout)
    cut.WaitForAssertion(
        () => cut.FindAll(".repository-item").Count.Should().Be(1),
        timeout: TimeSpan.FromSeconds(2)
    );
}
```

## Test Helpers and Utilities

### Test Data Builder
```csharp
public static class TestData
{
    public static DashboardViewModel CreateDashboardViewModel(
        int nonCompliantCount = 5,
        decimal compliancePercentage = 85.5m)
    {
        var faker = new Faker();
        
        return new DashboardViewModel
        {
            NonCompliantRepositories = Enumerable.Range(0, nonCompliantCount)
                .Select(_ => new Repository
                {
                    Name = faker.Lorem.Word(),
                    Owner = faker.Internet.UserName(),
                    Violations = new List<PolicyViolation>
                    {
                        new() { PolicyType = "has_agents_md" }
                    }
                })
                .ToList(),
            CompliancePercentage = compliancePercentage
        };
    }
}

// Usage
var viewModel = TestData.CreateDashboardViewModel();
```

### Custom Test Context
```csharp
public class AppTestContext : TestContext
{
    public AppTestContext()
    {
        // Setup common services
        Services.AddFluentUIComponents();
        Services.AddSingleton(Substitute.For<IDashboardService>());
        Services.AddSingleton(Substitute.For<IScanningService>());
        
        // Add authorization
        this.AddTestAuthorization().SetAuthorized("test-user");
    }
    
    public IRenderedComponent<T> RenderWithAuth<T>() where T : IComponent
    {
        return RenderComponent<T>();
    }
}

// Usage
public class IndexTests : AppTestContext
{
    [Fact]
    public void MyTest()
    {
        var cut = RenderWithAuth<Index>();
    }
}
```

## Common Patterns for This Project

### Testing Dashboard Component
```csharp
[Fact]
public async Task Dashboard_DisplaysNonCompliantRepositories()
{
    // Arrange
    var viewModel = TestData.CreateDashboardViewModel(nonCompliantCount: 3);
    _dashboardService.GetDashboardDataAsync().Returns(viewModel);
    
    // Act
    var cut = RenderComponent<Index>();
    
    // Assert
    var repoItems = cut.FindAll(".repository-item");
    repoItems.Should().HaveCount(3);
    cut.Find(".compliance-percentage").TextContent.Should().Contain("85.5%");
}
```

### Testing Scan Trigger
```csharp
[Fact]
public async Task ScanNowButton_TriggersBackgroundScan()
{
    // Arrange
    var cut = RenderComponent<Index>();
    
    // Act
    await cut.Find("#scan-now-button").ClickAsync(new MouseEventArgs());
    
    // Assert
    await _scanningService.Received(1).PerformScanAsync();
    cut.Instance.IsScanning.Should().BeTrue();
}
```

### Testing Onboarding Flow
```csharp
[Fact]
public void Onboarding_DisplaysConfigurationTemplate()
{
    // Act
    var cut = RenderComponent<Onboarding>();
    
    // Assert
    var template = cut.Find("#config-template");
    template.TextContent.Should().Contain("access_control:");
    template.TextContent.Should().Contain("policies:");
}
```

## Running Component Tests

```bash
# Run Blazor component tests
dotnet test --filter Category=Component

# Run specific component tests
dotnet test --filter FullyQualifiedName~IndexTests

# Run in watch mode for TDD
dotnet watch test --filter Category=Component
```

## Best Practices Summary

1. ✅ Inherit from `TestContext` for component tests
2. ✅ Mock all injected services with NSubstitute
3. ✅ Use `RenderComponent<T>()` to render components
4. ✅ Use CSS selectors or IDs to find elements
5. ✅ Test user interactions (clicks, input changes)
6. ✅ Wait for async operations with `WaitForState()`
7. ✅ Test both happy path and error states
8. ✅ Test conditional rendering and state changes
9. ✅ Use Bogus for test data generation
10. ❌ Don't test framework behavior (Blazor's rendering)
11. ❌ Don't test trivial components (simple display-only)
12. ❌ Don't make real API calls from component tests
