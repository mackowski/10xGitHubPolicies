---
alwaysApply: false
---

# Testing Rules Overview

## Quick Reference Guide

This document provides an overview of all testing rules for the 10x GitHub Policy Enforcer project. Each rule covers a specific testing approach with the relevant tech stack.

## Testing Pyramid

```
         /\
        /  \    E2E (5 tests)
       /----\   - Playwright
      /      \  - Critical workflows only
     /--------\  
    /          \ Component (20-30 tests)
   /------------\ - bUnit
  /              \ - UI component testing
 /----------------\
/                  \ Integration (40-60 tests)
/--------------------\ - Testcontainers + Respawn
|                    | - WireMock.Net
|--------------------| - WebApplicationFactory
|                    |
| Unit (200+ tests)  | Contract (10-15 tests)
|                    | - NJsonSchema + Verify.NET
----------------------  - GitHub API contracts
```

## When to Use Each Test Type

| Test Type | Use When | Tech Stack | Speed | Cost |
|-----------|----------|------------|-------|------|
| **Unit** | Testing business logic in isolation | xUnit + NSubstitute + FluentAssertions | ⚡ Very Fast (< 100ms) | 💰 Low |
| **Integration** | Testing component interactions | Testcontainers + Respawn + WireMock.Net | 🐢 Slow (1-5s) | 💰💰 Medium |
| **Contract** | Detecting API breaking changes | NJsonSchema + Verify.NET | 🐢 Slow (1-3s) | 💰 Low |
| **Component** | Testing Blazor UI components | bUnit + NSubstitute | ⚡ Fast (< 500ms) | 💰 Low |
| **E2E** | Critical user workflows | Playwright | 🐌 Very Slow (10-60s) | 💰💰💰 High |

## Rule Files

### 1. [unit-testing.mdc](./unit-testing.mdc) ⚡
**Technology**: xUnit + NSubstitute + FluentAssertions + Bogus

**Use for:**
- Service business logic
- Algorithm testing
- Validation logic
- Helper methods
- Edge cases

**Key Patterns:**
```csharp
[Fact]
public async Task MethodName_WhenCondition_ExpectedBehavior()
{
    // Arrange - Mock dependencies
    _dependency.Method().Returns(value);
    
    // Act - Call method under test
    var result = await _sut.MethodToTest();
    
    // Assert - Verify behavior
    result.Should().Be(expected);
    await _dependency.Received(1).Method();
}
```

**Coverage Target**: 85-90% code coverage

---

### 2. [integration-testing.mdc](./integration-testing.mdc) 🔗
**Technology**: Testcontainers + Respawn + WireMock.Net + WebApplicationFactory

**Use for:**
- Database operations
- GitHub API interactions (HTTP mocking)
- End-to-end workflows within services
- Cross-service communication

**Key Patterns:**
```csharp
public class IntegrationTests : IAsyncLifetime
{
    private readonly MsSqlContainer _sqlContainer;
    private Respawn.Checkpoint _checkpoint;
    
    public async Task InitializeAsync()
    {
        await _sqlContainer.StartAsync();
        _checkpoint = await Respawn.Checkpoint.ForDatabase(...);
    }
    
    [Fact]
    public async Task Test()
    {
        // Test logic
        await _checkpoint.Reset(_connectionString);
    }
}
```

**Best For**: Testing database queries, API integrations, job processing

---

### 3. [contract-testing.mdc](./contract-testing.mdc) 📜
**Technology**: NJsonSchema + Verify.NET + WireMock.Net

**Use for:**
- GitHub API response validation
- Detecting breaking changes
- API versioning protection
- Response structure documentation

**Key Patterns:**
```csharp
[Fact]
public async Task GetRepository_ResponseMatchesSchema()
{
    var repository = await _githubService.GetRepositoryAsync(12345);
    var json = JsonSerializer.Serialize(repository);
    var errors = _repositorySchema.Validate(json);
    
    errors.Should().BeEmpty();
}

[Fact]
public async Task GetRepository_StructureStable()
{
    var repository = await _githubService.GetRepositoryAsync(12345);
    await Verify(repository).ScrubMembers("id", "created_at");
}
```

**Best For**: External API stability monitoring (run daily/weekly)

---

### 4. [blazor-component-testing.mdc](./blazor-component-testing.mdc) 🎨
**Technology**: bUnit + NSubstitute + FluentAssertions

**Use for:**
- Blazor Razor component rendering
- User interaction testing
- Component state management
- Fluent UI component integration

**Key Patterns:**
```csharp
public class ComponentTests : TestContext
{
    [Fact]
    public void Component_Renders_Correctly()
    {
        // Arrange - Mock services
        Services.AddSingleton(_mockService);
        
        // Act - Render component
        var cut = RenderComponent<MyComponent>(parameters => parameters
            .Add(p => p.Value, "test")
        );
        
        // Assert - Verify rendering
        cut.Find("h1").TextContent.Should().Contain("test");
    }
}
```

**Best For**: Dashboard UI, forms, navigation, conditional rendering

---

### 5. [e2e-testing.mdc](./e2e-testing.mdc) 🌐
**Technology**: Playwright (TypeScript or C#)

**Use for:**
- Critical user workflows only (< 10 tests)
- OAuth authentication flow
- Cross-browser compatibility
- Pre-production smoke tests

**Key Patterns:**
```typescript
test('complete scan workflow', async ({ page }) => {
  const dashboardPage = new DashboardPage(page);
  
  await dashboardPage.goto();
  await dashboardPage.triggerScan();
  await dashboardPage.waitForScanComplete();
  
  const count = await dashboardPage.getRepositoryCount();
  expect(count).toBeGreaterThan(0);
});
```

**Best For**: Authentication, critical workflows, smoke tests

---

## Test Organization

### Project Structure
```
10xGitHubPolicies/
├── 10xGitHubPolicies.App/           # Application code
├── 10xGitHubPolicies.Tests/         # Unit tests
│   ├── Services/
│   │   ├── ConfigurationServiceTests.cs
│   │   ├── GitHubServiceTests.cs
│   │   └── PolicyEvaluationServiceTests.cs
│   └── ...
├── 10xGitHubPolicies.Tests.Integration/  # Integration tests
│   ├── Database/
│   ├── GitHub/
│   └── Workflows/
├── 10xGitHubPolicies.Tests.Contracts/    # Contract tests
│   ├── Schemas/
│   └── Snapshots/
├── 10xGitHubPolicies.Tests.Components/   # Blazor component tests
│   ├── Pages/
│   └── Shared/
└── tests/                            # E2E tests (Playwright)
    ├── e2e/
    └── pages/
```

### Naming Conventions

| Test Type | File Name | Class Name | Test Method |
|-----------|-----------|------------|-------------|
| Unit | `ServiceNameTests.cs` | `ServiceNameTests` | `MethodName_WhenCondition_ExpectedBehavior` |
| Integration | `FeatureIntegrationTests.cs` | `FeatureIntegrationTests` | `Feature_Scenario_ExpectedResult` |
| Contract | `ApiContractTests.cs` | `ApiContractTests` | `Endpoint_ContractStability` |
| Component | `ComponentNameTests.cs` | `ComponentNameTests` | `Component_Action_ExpectedResult` |
| E2E | `feature.spec.ts` | N/A | `'should complete workflow'` |

## Running Tests

### All Tests
```bash
# Run all tests
dotnet test

# Run with coverage
dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
```

### By Category
```bash
# Unit tests only (fast feedback)
dotnet test --filter Category=Unit

# Integration tests
dotnet test --filter Category=Integration

# Contract tests
dotnet test --filter Category=Contract

# Component tests
dotnet test --filter Category=Component

# E2E tests
cd tests && npx playwright test
```

### By Project
```bash
# Unit tests
dotnet test 10xGitHubPolicies.Tests

# Integration tests
dotnet test 10xGitHubPolicies.Tests.Integration

# Component tests
dotnet test 10xGitHubPolicies.Tests.Components
```

### Watch Mode (TDD)
```bash
# Watch and rerun unit tests
dotnet watch test --filter Category=Unit

# Watch specific test class
dotnet watch test --filter FullyQualifiedName~ConfigurationServiceTests
```

## Development Workflow

### 1. **TDD with Unit Tests** (Primary)
```bash
# Start watch mode
dotnet watch test --filter Category=Unit

# Write failing test → Implement → Make it pass → Refactor
```

### 2. **Integration Tests** (After unit tests pass)
```bash
# Ensure Docker is running
docker ps

# Run integration tests
dotnet test --filter Category=Integration
```

### 3. **Component Tests** (For UI features)
```bash
dotnet test --filter Category=Component
```

### 4. **Contract Tests** (Weekly/when API changes)
```bash
dotnet test --filter Category=Contract
```

### 5. **E2E Tests** (Before deployment)
```bash
cd tests
npx playwright test
```

## CI/CD Pipeline Order

```yaml
1. Unit Tests        (always, fast feedback)
   ↓
2. Lint/Format      (code quality gates)
   ↓
3. Integration Tests (on main branch)
   ↓
4. Component Tests   (UI validation)
   ↓
5. Contract Tests    (API stability check)
   ↓
6. E2E Tests        (smoke tests before deploy)
   ↓
7. Deploy           (if all pass)
```

## Test Coverage Goals

| Test Type | Target Coverage | Reality Check |
|-----------|----------------|---------------|
| Unit | 85-90% | Focus on business logic, not getters/setters |
| Integration | All critical paths | Database operations, API calls, workflows |
| Contract | Critical APIs only | 5-10 endpoints maximum |
| Component | Key UI components | Dashboard, forms, navigation |
| E2E | 5-10 critical workflows | Authentication, scan, view results |

## Quick Decision Tree

```
Need to test something?
│
├─ Is it business logic?
│  └─ → Unit Test (unit-testing.mdc)
│
├─ Does it interact with database/API?
│  └─ → Integration Test (integration-testing.mdc)
│
├─ Is it an external API response?
│  └─ → Contract Test (contract-testing.mdc)
│
├─ Is it a Blazor UI component?
│  └─ → Component Test (blazor-component-testing.mdc)
│
└─ Is it a critical user workflow?
   └─ → E2E Test (e2e-testing.mdc)
```

## Getting Help

- **Unit Testing**: See `unit-testing.mdc`
- **Integration Testing**: See `integration-testing.mdc`
- **Contract Testing**: See `contract-testing.mdc`
- **Blazor Components**: See `blazor-component-testing.mdc`
- **E2E Testing**: See `e2e-testing.mdc`
- **Test Plan**: See `.ai/test-plan.md`
- **Tech Stack**: See `.ai/tech-stack.md`

## Common Commands Cheat Sheet

```bash
# Development
dotnet watch test --filter Category=Unit         # TDD mode
dotnet test --filter FullyQualifiedName~MyTest   # Run specific test

# Coverage
dotnet test /p:CollectCoverage=true              # Generate coverage
reportgenerator -reports:coverage.cobertura.xml  # View report

# CI/CD
dotnet test --filter Category!=E2E               # All except E2E
dotnet test --logger "trx;LogFileName=results.trx" # CI-friendly output

# E2E
npx playwright test                              # Run all E2E
npx playwright test --headed                     # Debug mode
npx playwright test --ui                         # Interactive UI

# Cleanup
docker ps -a | grep testcontainers | awk '{print $1}' | xargs docker rm -f
```

## Remember

- ✅ **Write unit tests first** (fastest feedback)
- ✅ **Integration tests for cross-component behavior**
- ✅ **Contract tests to catch API breaking changes**
- ✅ **Component tests for UI validation**
- ✅ **E2E tests sparingly** (slow and expensive)
- ✅ **Run tests in CI/CD before merging**
- ✅ **Keep tests independent and deterministic**
- ❌ **Don't test framework code**
- ❌ **Don't over-engineer test infrastructure**
- ❌ **Don't skip tests "just this once"**
