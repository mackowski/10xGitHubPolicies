name: ci-cd
on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: '10xGitHubPolicies.App/10xGitHubPolicies.App.csproj'
  WEBAPP_NAME: 'wa-10xghpolicies-prod'
  RESOURCE_GROUP: 'rg-10xghpolicies-prod'
  SQL_SERVER: 'sql-10xghpolicies-prod'
  SQL_DB: 'sqldb-10xghpolicies'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - run: dotnet restore ${{ env.PROJECT_PATH }}
      - run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore
      # - run: dotnet test --configuration Release --no-build
      - run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o publish
      - uses: actions/upload-artifact@v4
        with:
          name: drop
          path: publish

  migrate-and-deploy:
    environment: production
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: drop
          path: drop

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Optional: Get runner public IP and open firewall temporarily unless using private endpoints
      - name: Get runner public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add firewall rule for runner
        uses: azure/cli@v2
        with:
          inlineScript: |
            az sql server firewall-rule create \
              -g ${{ env.RESOURCE_GROUP }} \
              -s ${{ env.SQL_SERVER }} \
              -n "gh-runner-${{ github.run_id }}" \
              --start-ip-address ${{ steps.ip.outputs.ipv4 }} \
              --end-ip-address ${{ steps.ip.outputs.ipv4 }}

      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Recommended: run migrations using Managed Identity via a tiny console runner
      # This avoids handling AAD tokens in CLI and remains secretless
      - name: Run EF Core migrations via MSI
        env:
          ConnectionStrings__DefaultConnection: "Server=tcp:${{ env.SQL_SERVER }}.database.windows.net,1433;Database=${{ env.SQL_DB }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=Active Directory Managed Identity"
          ASPNETCORE_ENVIRONMENT: "Production"
        run: |
          dotnet run --project Tools/DbMigrator/DbMigrator.csproj --configuration Release

      - name: Remove firewall rule
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            az sql server firewall-rule delete \
              -g ${{ env.RESOURCE_GROUP }} \
              -s ${{ env.SQL_SERVER }} \
              -n "gh-runner-${{ github.run_id }}" \
              --yes

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          package: drop

      - name: Apply app settings (idempotent)
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set \
              -g ${{ env.RESOURCE_GROUP }} \
              -n ${{ env.WEBAPP_NAME }} \
              --settings \
                ASPNETCORE_ENVIRONMENT=Production \
                TestMode__Enabled=false \
                GitHubApp__OrganizationName='${{ secrets.ORG_NAME }}' \
                GitHubApp__AppId='${{ secrets.GH_APP_ID }}' \
                GitHubApp__PrivateKey='${{ secrets.GH_APP_PRIVATE_KEY }}' \
                GitHubApp__InstallationId='${{ secrets.GH_APP_INSTALLATION_ID }}' \
                GitHub__ClientId='${{ secrets.OAUTH_CLIENT_ID }}' \
                GitHub__ClientSecret='${{ secrets.OAUTH_CLIENT_SECRET }}' \
                ConnectionStrings__DefaultConnection='Server=tcp:${{ env.SQL_SERVER }}.database.windows.net,1433;Database=${{ env.SQL_DB }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=Active Directory Managed Identity'


